//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/InputSystem/GameInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputs"",
    ""maps"": [
        {
            ""name"": ""Chat"",
            ""id"": ""f49204b6-2201-4e1b-89f5-77c0bd738b3b"",
            ""actions"": [
                {
                    ""name"": ""SendChat"",
                    ""type"": ""Button"",
                    ""id"": ""8dd44d84-e26e-4931-9285-f5974ce5cc41"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenChat"",
                    ""type"": ""Button"",
                    ""id"": ""3da7ef10-9d17-479a-ad52-481e79531a89"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d8fb5163-1d49-4f63-a58a-a506c9ff996b"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SendChat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7f8f9318-89a6-42ca-a34b-d562d6ce9d0b"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenChat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Health"",
            ""id"": ""25c76532-e9ee-4977-a0a6-4b29186ba648"",
            ""actions"": [
                {
                    ""name"": ""Decrease"",
                    ""type"": ""Button"",
                    ""id"": ""e7d183c9-a857-4101-82f1-c2a715c41d5c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Increase"",
                    ""type"": ""Button"",
                    ""id"": ""3339e97c-00c2-4985-88c5-cb38d7fab7b5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e3017e42-f81a-41a2-a9ca-9d17071a44c0"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Decrease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b621099e-1110-433c-a4be-07f8bbb9eb78"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Increase"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player"",
            ""id"": ""97edd078-dc38-4501-b885-b974f21fc48e"",
            ""actions"": [
                {
                    ""name"": ""Punch"",
                    ""type"": ""Button"",
                    ""id"": ""d7528416-4517-4848-b27c-ce30579fbc5f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""653319e4-6c30-49da-bc54-c3abb9e55199"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Punch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Chat
        m_Chat = asset.FindActionMap("Chat", throwIfNotFound: true);
        m_Chat_SendChat = m_Chat.FindAction("SendChat", throwIfNotFound: true);
        m_Chat_OpenChat = m_Chat.FindAction("OpenChat", throwIfNotFound: true);
        // Health
        m_Health = asset.FindActionMap("Health", throwIfNotFound: true);
        m_Health_Decrease = m_Health.FindAction("Decrease", throwIfNotFound: true);
        m_Health_Increase = m_Health.FindAction("Increase", throwIfNotFound: true);
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Punch = m_Player.FindAction("Punch", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Chat
    private readonly InputActionMap m_Chat;
    private List<IChatActions> m_ChatActionsCallbackInterfaces = new List<IChatActions>();
    private readonly InputAction m_Chat_SendChat;
    private readonly InputAction m_Chat_OpenChat;
    public struct ChatActions
    {
        private @GameInputs m_Wrapper;
        public ChatActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @SendChat => m_Wrapper.m_Chat_SendChat;
        public InputAction @OpenChat => m_Wrapper.m_Chat_OpenChat;
        public InputActionMap Get() { return m_Wrapper.m_Chat; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ChatActions set) { return set.Get(); }
        public void AddCallbacks(IChatActions instance)
        {
            if (instance == null || m_Wrapper.m_ChatActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ChatActionsCallbackInterfaces.Add(instance);
            @SendChat.started += instance.OnSendChat;
            @SendChat.performed += instance.OnSendChat;
            @SendChat.canceled += instance.OnSendChat;
            @OpenChat.started += instance.OnOpenChat;
            @OpenChat.performed += instance.OnOpenChat;
            @OpenChat.canceled += instance.OnOpenChat;
        }

        private void UnregisterCallbacks(IChatActions instance)
        {
            @SendChat.started -= instance.OnSendChat;
            @SendChat.performed -= instance.OnSendChat;
            @SendChat.canceled -= instance.OnSendChat;
            @OpenChat.started -= instance.OnOpenChat;
            @OpenChat.performed -= instance.OnOpenChat;
            @OpenChat.canceled -= instance.OnOpenChat;
        }

        public void RemoveCallbacks(IChatActions instance)
        {
            if (m_Wrapper.m_ChatActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IChatActions instance)
        {
            foreach (var item in m_Wrapper.m_ChatActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ChatActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ChatActions @Chat => new ChatActions(this);

    // Health
    private readonly InputActionMap m_Health;
    private List<IHealthActions> m_HealthActionsCallbackInterfaces = new List<IHealthActions>();
    private readonly InputAction m_Health_Decrease;
    private readonly InputAction m_Health_Increase;
    public struct HealthActions
    {
        private @GameInputs m_Wrapper;
        public HealthActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Decrease => m_Wrapper.m_Health_Decrease;
        public InputAction @Increase => m_Wrapper.m_Health_Increase;
        public InputActionMap Get() { return m_Wrapper.m_Health; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HealthActions set) { return set.Get(); }
        public void AddCallbacks(IHealthActions instance)
        {
            if (instance == null || m_Wrapper.m_HealthActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HealthActionsCallbackInterfaces.Add(instance);
            @Decrease.started += instance.OnDecrease;
            @Decrease.performed += instance.OnDecrease;
            @Decrease.canceled += instance.OnDecrease;
            @Increase.started += instance.OnIncrease;
            @Increase.performed += instance.OnIncrease;
            @Increase.canceled += instance.OnIncrease;
        }

        private void UnregisterCallbacks(IHealthActions instance)
        {
            @Decrease.started -= instance.OnDecrease;
            @Decrease.performed -= instance.OnDecrease;
            @Decrease.canceled -= instance.OnDecrease;
            @Increase.started -= instance.OnIncrease;
            @Increase.performed -= instance.OnIncrease;
            @Increase.canceled -= instance.OnIncrease;
        }

        public void RemoveCallbacks(IHealthActions instance)
        {
            if (m_Wrapper.m_HealthActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHealthActions instance)
        {
            foreach (var item in m_Wrapper.m_HealthActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HealthActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HealthActions @Health => new HealthActions(this);

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Punch;
    public struct PlayerActions
    {
        private @GameInputs m_Wrapper;
        public PlayerActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Punch => m_Wrapper.m_Player_Punch;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Punch.started += instance.OnPunch;
            @Punch.performed += instance.OnPunch;
            @Punch.canceled += instance.OnPunch;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Punch.started -= instance.OnPunch;
            @Punch.performed -= instance.OnPunch;
            @Punch.canceled -= instance.OnPunch;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IChatActions
    {
        void OnSendChat(InputAction.CallbackContext context);
        void OnOpenChat(InputAction.CallbackContext context);
    }
    public interface IHealthActions
    {
        void OnDecrease(InputAction.CallbackContext context);
        void OnIncrease(InputAction.CallbackContext context);
    }
    public interface IPlayerActions
    {
        void OnPunch(InputAction.CallbackContext context);
    }
}
